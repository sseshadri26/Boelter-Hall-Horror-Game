//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/UI/UI_TESTING.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UI_TESTING : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UI_TESTING()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UI_TESTING"",
    ""maps"": [
        {
            ""name"": ""PanelManagement"",
            ""id"": ""f282eedb-b837-429c-8e9c-048db848779c"",
            ""actions"": [
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""6fa93869-14ea-45c5-bbe3-40188f94aa55"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""07e3df3b-7373-41ec-943c-425efb7acf13"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Journal"",
                    ""type"": ""Button"",
                    ""id"": ""d37e00f6-0400-46ea-9a80-26160f144f57"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""45bca378-452d-426b-8041-641a2c8f7ce9"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1e13ac5-97ad-468a-8f99-125933dab86d"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb68e052-c835-43f2-98c2-444969734b43"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c06c338-c986-4f19-8bf6-b8f76ec2134b"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68e63245-c1f9-4e4c-843a-652ad0a7e5be"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Journal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b23f41e-5763-4e4c-bf44-6a62a6940765"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Journal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PanelManagement
        m_PanelManagement = asset.FindActionMap("PanelManagement", throwIfNotFound: true);
        m_PanelManagement_Inventory = m_PanelManagement.FindAction("Inventory", throwIfNotFound: true);
        m_PanelManagement_Pause = m_PanelManagement.FindAction("Pause", throwIfNotFound: true);
        m_PanelManagement_Journal = m_PanelManagement.FindAction("Journal", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PanelManagement
    private readonly InputActionMap m_PanelManagement;
    private IPanelManagementActions m_PanelManagementActionsCallbackInterface;
    private readonly InputAction m_PanelManagement_Inventory;
    private readonly InputAction m_PanelManagement_Pause;
    private readonly InputAction m_PanelManagement_Journal;
    public struct PanelManagementActions
    {
        private @UI_TESTING m_Wrapper;
        public PanelManagementActions(@UI_TESTING wrapper) { m_Wrapper = wrapper; }
        public InputAction @Inventory => m_Wrapper.m_PanelManagement_Inventory;
        public InputAction @Pause => m_Wrapper.m_PanelManagement_Pause;
        public InputAction @Journal => m_Wrapper.m_PanelManagement_Journal;
        public InputActionMap Get() { return m_Wrapper.m_PanelManagement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PanelManagementActions set) { return set.Get(); }
        public void SetCallbacks(IPanelManagementActions instance)
        {
            if (m_Wrapper.m_PanelManagementActionsCallbackInterface != null)
            {
                @Inventory.started -= m_Wrapper.m_PanelManagementActionsCallbackInterface.OnInventory;
                @Inventory.performed -= m_Wrapper.m_PanelManagementActionsCallbackInterface.OnInventory;
                @Inventory.canceled -= m_Wrapper.m_PanelManagementActionsCallbackInterface.OnInventory;
                @Pause.started -= m_Wrapper.m_PanelManagementActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_PanelManagementActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_PanelManagementActionsCallbackInterface.OnPause;
                @Journal.started -= m_Wrapper.m_PanelManagementActionsCallbackInterface.OnJournal;
                @Journal.performed -= m_Wrapper.m_PanelManagementActionsCallbackInterface.OnJournal;
                @Journal.canceled -= m_Wrapper.m_PanelManagementActionsCallbackInterface.OnJournal;
            }
            m_Wrapper.m_PanelManagementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Inventory.started += instance.OnInventory;
                @Inventory.performed += instance.OnInventory;
                @Inventory.canceled += instance.OnInventory;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Journal.started += instance.OnJournal;
                @Journal.performed += instance.OnJournal;
                @Journal.canceled += instance.OnJournal;
            }
        }
    }
    public PanelManagementActions @PanelManagement => new PanelManagementActions(this);
    public interface IPanelManagementActions
    {
        void OnInventory(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnJournal(InputAction.CallbackContext context);
    }
}
